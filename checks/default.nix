{ pkgs, treefmt-nix, ... }:
let
  inherit (pkgs) lib;

  join = lib.concatStringsSep;

  toConfig = name:
    treefmt-nix.mkConfigFile pkgs {
      programs.${name}.enable = true;
    };

  programConfigs = lib.listToAttrs (map
    (name: { name = "formatter-${name}"; value = toConfig name; })
    treefmt-nix.programs.names
  );

  examples =
    let
      configs = lib.mapAttrs
        (name: value:
          ''
            {
              echo "# Example generated by ../examples.sh"
              sed -n '/^$/q;p' ${value} | sed 's|\(command = "\).*/\([^"]\+"\)|\1\2|'
            } > "$out/${name}.toml"
          ''
        )
        # mypy example contains store paths
        (lib.filterAttrs (n: _: n != "formatter-mypy") programConfigs);
    in
    pkgs.runCommand "examples" { } ''
      mkdir $out

      ${join "\n" (lib.attrValues configs)}
    '';

  treefmtEval = treefmt-nix.evalModule pkgs ../treefmt.nix;

  treefmtDocEval = treefmt-nix.evalModule stubPkgs ../treefmt.nix;

  stubPkgs =
    lib.mapAttrs
      (k: _: throw "The module documentation must not depend on pkgs attributes such as ${lib.strings.escapeNixIdentifier k}")
      pkgs
    // {
      inherit lib;
    };

  self = {
    empty-config = treefmt-nix.mkConfigFile pkgs { };

    simple-wrapper = treefmt-nix.mkWrapper pkgs {
      projectRootFile = "flake.nix";
    };

    # Check if the examples folder needs to be updated
    examples = pkgs.runCommand
      "test-examples"
      {
        passthru.examples = examples;
      }
      ''
        if ! diff -r ${../examples} ${examples}; then
          echo "The generated ./examples folder is out of sync"
          echo "Run ./examples.sh to fix the issue"
          exit 1
        fi
        touch $out
      '';

    # Check that the repo is formatted
    self-formatting = treefmtEval.config.build.check ../.;

    # Expose the current wrapper
    self-wrapper = treefmtEval.config.build.wrapper;

    # Check that the docs render properly
    module-docs = (pkgs.nixosOptionsDoc { options = treefmtDocEval.options; }).optionsCommonMark;
  } // programConfigs;
in
self
